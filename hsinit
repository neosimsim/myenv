#!/bin/sh

# To unbundle, run this file
echo ./app
mkdir -p ./app
chmod 755 ./app
echo ./app
mkdir -p ./app
chmod 755 ./app
echo ./app/Main.hs
sed 's/.//' >./app/Main.hs <<'//GO.SYSIN DD ./app/Main.hs'
-module Main
-  ( main
-  ) where
-
-import           Lib
-
-main :: IO ()
-main = putStrLn msg
//GO.SYSIN DD ./app/Main.hs
chmod 644 ./app/Main.hs
echo ./CHANGELOG.md
sed 's/.//' >./CHANGELOG.md <<'//GO.SYSIN DD ./CHANGELOG.md'
-# Revision history for <app>
-
-## 0.1.0 -- YYYY-mm-dd
-
-* First version. Released on an unsuspecting world.
//GO.SYSIN DD ./CHANGELOG.md
chmod 644 ./CHANGELOG.md
echo ./.gitignore
sed 's/.//' >./.gitignore <<'//GO.SYSIN DD ./.gitignore'
-dist-newstyle
-dist
-.ghc.environment.*
//GO.SYSIN DD ./.gitignore
chmod 644 ./.gitignore
echo ./hsinit
sed 's/.//' >./hsinit <<'//GO.SYSIN DD ./hsinit'
-#!/bin/sh
-
-# To unbundle, run this file
-echo ./app
-mkdir -p ./app
-chmod 755 ./app
-echo ./app
-mkdir -p ./app
-chmod 755 ./app
-echo ./app/Main.hs
-sed 's/.//' >./app/Main.hs <<'//GO.SYSIN DD ./app/Main.hs'
--module Main
--  ( main
--  ) where
--
--import           Lib
--
--main :: IO ()
--main = putStrLn msg
-//GO.SYSIN DD ./app/Main.hs
-chmod 644 ./app/Main.hs
-echo ./CHANGELOG.md
-sed 's/.//' >./CHANGELOG.md <<'//GO.SYSIN DD ./CHANGELOG.md'
--# Revision history for <app>
--
--## 0.1.0 -- YYYY-mm-dd
--
--* First version. Released on an unsuspecting world.
-//GO.SYSIN DD ./CHANGELOG.md
-chmod 644 ./CHANGELOG.md
-echo ./.gitignore
-sed 's/.//' >./.gitignore <<'//GO.SYSIN DD ./.gitignore'
--dist-newstyle
--dist
--.ghc.environment.*
-//GO.SYSIN DD ./.gitignore
-chmod 644 ./.gitignore
-echo ./hsinit
-sed 's/.//' >./hsinit <<'//GO.SYSIN DD ./hsinit'
//GO.SYSIN DD ./hsinit
chmod 644 ./hsinit
echo ./init
sed 's/.//' >./init <<'//GO.SYSIN DD ./init'
-#!/bin/sh
-
-name=$(basename `pwd`)
-name=${1:-$name}
-
-sed "s/<project>/$name/g" project.cabal >$name.cabal
-
-rm project.cabal
-rm $0
-
-git init .
-cp misc/git/pre-commit .git/hooks/
-git add .
-git commit -m 'initial commit'
//GO.SYSIN DD ./init
chmod 755 ./init
echo ./LICENSE
sed 's/.//' >./LICENSE <<'//GO.SYSIN DD ./LICENSE'
-BSD 3-Clause License
-
-Copyright Â© 2018, Alexander Ben Nasrallah <me@abn.sh>
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions are met:
-
-* Redistributions of source code must retain the above copyright notice, this
-  list of conditions and the following disclaimer.
-
-* Redistributions in binary form must reproduce the above copyright notice,
-  this list of conditions and the following disclaimer in the documentation
-  and/or other materials provided with the distribution.
-
-* Neither the name of the copyright holder nor the names of its
-  contributors may be used to endorse or promote products derived from
-  this software without specific prior written permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
-FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
//GO.SYSIN DD ./LICENSE
chmod 644 ./LICENSE
echo ./misc
mkdir -p ./misc
chmod 755 ./misc
echo ./misc
mkdir -p ./misc
chmod 755 ./misc
echo ./misc/git
mkdir -p ./misc/git
chmod 755 ./misc/git
echo ./misc
mkdir -p ./misc
chmod 755 ./misc
echo ./misc/git
mkdir -p ./misc/git
chmod 755 ./misc/git
echo ./misc/git/pre-commit
sed 's/.//' >./misc/git/pre-commit <<'//GO.SYSIN DD ./misc/git/pre-commit'
-#!/bin/sh
-#
-# An example hook script to verify what is about to be committed.
-# Called by "git commit" with no arguments.  The hook should
-# exit with non-zero status after issuing an appropriate message if
-# it wants to stop the commit.
-#
-# To enable this hook, rename this file to "pre-commit".
-
-if git rev-parse --verify HEAD >/dev/null 2>&1
-then
-	against=HEAD
-else
-	# Initial commit: diff against an empty tree object
-	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
-fi
-
-# If you want to allow non-ASCII filenames set this variable to true.
-allownonascii=$(git config --bool hooks.allownonascii)
-
-# Redirect output to stderr.
-exec 1>&2
-
-# Cross platform projects tend to avoid non-ASCII filenames; prevent
-# them from being added to the repository. We exploit the fact that the
-# printable range starts at the space character and ends with tilde.
-if [ "$allownonascii" != "true" ] &&
-	# Note that the use of brackets around a tr range is ok here, (it's
-	# even required, for portability to Solaris 10's /usr/bin/tr), since
-	# the square bracket bytes happen to fall in the designated range.
-	test $(git diff --cached --name-only --diff-filter=A -z $against |
-	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
-then
-	cat <<\EOF
-Error: Attempt to add a non-ASCII file name.
-
-This can cause problems if you want to work with people on other platforms.
-
-To be portable it is advisable to rename the file.
-
-If you know what you are doing you can disable this check using:
-
-  git config hooks.allownonascii true
-EOF
-	exit 1
-fi
-
-# If there are whitespace errors, print the offending file names and fail.
-if ! git diff-index --check --cached $against -- ; then
-	exit 1
-fi
-
-unformatted=$(hfmt -l)
-if [ -n "$unformatted" ]; then
-	echo "Haskell files must be formatted with hfmt. Please run:"
-	for fn in $unformatted; do
-		echo "  hfmt -w $fn"
-	done
-    exit 1
-fi
-
-if ! (cabal check); then
-	echo Fix the cabal project file before commit.
-    exit 1
-fi
-
-if ! (cabal new-clean && cabal new-build --flags=develop && cabal new-test --flag=develop); then
-	echo "Project can't be build. Please fix before."
-	exit 1
-fi
//GO.SYSIN DD ./misc/git/pre-commit
chmod 755 ./misc/git/pre-commit
echo ./project.cabal
sed 's/.//' >./project.cabal <<'//GO.SYSIN DD ./project.cabal'
-name:                <project>
-version:             0.1.0
-synopsis:            ..
-description:         ...
-homepage:            https://github.com/neosimsim/<project>
-license:             BSD3
-license-file:        LICENSE
-author:              Alexander Ben Nasrallah
-maintainer:          me@abn.sh
--- copyright:
-category:            Misc
-build-type:          Simple
-extra-source-files:  CHANGELOG.md
-cabal-version:       >=1.10
-
-source-repository head
-  type:              git
-  location:          https://github.com/neosimsim/<project>
-
-flag develop
-  description: Enable warnings and treat them as error.
-  default:     False
-  manual:      True
-
-library
-  exposed-modules: Lib
-  -- other-modules:
-  -- other-extensions:
-  build-depends:       base == 4.*
-  hs-source-dirs:      src
-  default-language:    Haskell2010
-  if flag(develop)
-    ghc-options: -Wall -Werror -Wno-type-defaults
-
-executable <project>
-  main-is:             Main.hs
-  -- other-modules:
-  -- other-extensions:
-  build-depends:       base == 4.*, <project>
-  hs-source-dirs:      app
-  default-language:    Haskell2010
-  if flag(develop)
-    ghc-options: -Wall -Werror -Wno-type-defaults
-
-test-suite tests
-  type:                exitcode-stdio-1.0
-  main-is:             Spec.hs
-  hs-source-dirs:      test
-  default-language:    Haskell2010
-  build-depends:       base == 4.*, QuickCheck
-  if flag(develop)
-    ghc-options: -Wall -Werror -Wno-type-defaults
//GO.SYSIN DD ./project.cabal
chmod 644 ./project.cabal
echo ./Setup.hs
sed 's/.//' >./Setup.hs <<'//GO.SYSIN DD ./Setup.hs'
-import Distribution.Simple
-main = defaultMain
//GO.SYSIN DD ./Setup.hs
chmod 644 ./Setup.hs
echo ./src
mkdir -p ./src
chmod 755 ./src
echo ./src
mkdir -p ./src
chmod 755 ./src
echo ./src/Lib.hs
sed 's/.//' >./src/Lib.hs <<'//GO.SYSIN DD ./src/Lib.hs'
--- | Template library
-module Lib
-  ( msg
-  ) where
-
--- | A message string
-msg :: String
-msg = "Hello Haskell!"
//GO.SYSIN DD ./src/Lib.hs
chmod 644 ./src/Lib.hs
echo ./test
mkdir -p ./test
chmod 755 ./test
echo ./test
mkdir -p ./test
chmod 755 ./test
echo ./test/Spec.hs
sed 's/.//' >./test/Spec.hs <<'//GO.SYSIN DD ./test/Spec.hs'
-module Main
-  ( main
-  ) where
-
-import           Control.Monad
-import           System.Exit
-import           Test.QuickCheck
-
-prop_true :: a -> Bool
-prop_true _ = True
-
-main :: IO ()
-main = do
-  putStrLn "Hello, Haskell!"
-  result <- quickCheckResult (prop_true :: Integer -> Bool)
-  unless (isSuccess result) exitFailure
//GO.SYSIN DD ./test/Spec.hs
chmod 644 ./test/Spec.hs
