#!/bin/sh

# LICENSE: wtf

# Trying to replace pass since it depence on bash. This programm shall be
# written to depend on general POSIX shells.

# command:
# keystore show <name>
# keystore add <name>

default_cmd='list'
basedir=$HOME/.keystore
keydir=$basedir/keys
key_id_file=key_id
valid_name_character='[a-zA-Z0-9/_-]'

if [ -z $1 ]; then
	cmd=$default_cmd
else
	cmd=$1
fi

# need come place to store gpg key id
# check if key id is stored else ask for it
# write new file with decrypted input to $basedir/<name>
# name might contain slashes (/) and represent folders.
# list calls $(tree $basedir).

if [ ! -e $basedir/$key_id_file ]; then
	echo Initializing key_id sasda store
	mkdir -p $basedir
	read key_id
	echo $key_id > $basedir/$key_id_file;
fi

validateName () {
	if [ -z $1 ]; then echo "<name> is missing"; exit 1; fi
	if ! $(echo $1 | grep "^$valid_name_character*\$" > /dev/null); then echo "<name> can only contain $valid_name_character"; exit 1; fi
}

case $cmd in
	(show)
		validateName $2
		gpg2 --quiet --decrypt $keydir/$2 | sed -n '1p'
		;;
	(login)
		validateName $2
		gpg2 --quiet --decrypt $keydir/$2 | sed -n '2p'
		;;
	(add)
		validateName $2
		login_name=$3
		file_path=$keydir/$2
		if [ -e $file_path ]; then echo $2 exists; exit 1; fi
		read pass
		# <name> might contain slashes, meaning directories
		mkdir -p $(dirname $file_path)
		key_id=$(cat $basedir/$key_id_file)
		echo -e "$pass\n$login_name" | gpg2 --encrypt -r $key_id -o $file_path
		;;
	(rm)
		validateName $2
		file_path=$keydir/$2
		rm -ri $file_path
		;;
	(list)
		tree $keydir/$2
		;;
	(*)
		echo Unknown command
		echo "Usage: keystore add <name> [login]"
		echo "Usage: keystore show <name>"
		echo "Usage: keystore login <name>"
		exit 1
		;;
esac
