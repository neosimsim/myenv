(ert-deftest neosimsim-path-locus-regex-match-file-line ()
  (let ((path-locus "a/b/c.txt:1"))
    (should (= (string-match neosimsim-path-locus-regex path-locus) 0))
    (should (string= (match-string 2 path-locus) "a/b/c.txt"))
    (should (string= (match-string 3 path-locus) "1"))
    (should (string= (match-string 5 path-locus) nil))))

(ert-deftest neosimsim-path-locus-regex-match-file-line-trailing-colon ()
  (let ((path-locus "a/b/c.txt:1:"))
    (should (= (string-match neosimsim-path-locus-regex path-locus) 0))
    (should (string= (match-string 2 path-locus) "a/b/c.txt"))
    (should (string= (match-string 3 path-locus) "1"))
    (should (string= (match-string 5 path-locus) nil))))

(ert-deftest neosimsim-path-locus-regex-match-file-line-column ()
  (let ((path-locus "a/b/c.txt:1:2"))
    (should (= (string-match neosimsim-path-locus-regex path-locus) 0))
    (should (string= (match-string 2 path-locus) "a/b/c.txt"))
    (should (string= (match-string 3 path-locus) "1"))
    (should (string= (match-string 5 path-locus) "2"))))

(ert-deftest neosimsim-path-locus-regex-match-file-line-column-trailing-colon ()
  (let ((path-locus "a/b/c.txt:1:2:"))
    (should (= (string-match neosimsim-path-locus-regex path-locus) 0))
    (should (string= (match-string 2 path-locus) "a/b/c.txt"))
    (should (string= (match-string 3 path-locus) "1"))
    (should (string= (match-string 5 path-locus) "2"))))

(ert-deftest neosimsim-path-locus-regex-no-match-without-colon ()
  (let ((path-locus "a/b/c.txt"))
    (should (eql (string-match neosimsim-path-locus-regex path-locus) nil))))
